// 
// Actor.custom
//  
// Author:
//   Aaron Bockover <abockover@novell.com>
// 
// Copyright 2009 Novell, Inc.
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

public void Allocate (ActorBox box)
{
    Allocate (box, AllocationFlags.None);
}

public void Allocate (Geometry geometry, AllocationFlags flags)
{
    Allocate (new ActorBox () {
        X1 = geometry.X,
        Y1 = geometry.Y,
        Width = geometry.Width,
        Height = geometry.Height
    }, flags);
}

public void Allocate (Geometry geometry)
{
    Allocate (geometry, AllocationFlags.None);
}

private AnimationChain animation_chain;
public AnimationChain AnimationChain {
    get { return animation_chain = animation_chain ?? new AnimationChain (this); }
}

public bool IsMapped {
    get { return (Flags & ActorFlags.Mapped) != 0; }
    set { 
        if (value) {
            Flags |= ActorFlags.Mapped;
        } else {
            Flags &= ~ActorFlags.Mapped;
        }
    }
}

public bool IsReactive {
    get { return (Flags & ActorFlags.Reactive) != 0; }
    set {
        if (value) {
            Flags |= ActorFlags.Reactive;
        } else {
            Flags &= ~ActorFlags.Reactive;
        }
    }
}

public bool IsRealized {
    get { return (Flags & ActorFlags.Realized) != 0; }
    set {
        if (value) {
            Flags |= ActorFlags.Realized;
        } else {
            Flags &= ~ActorFlags.Realized;
        }
    }
}

public bool IsVisible {
    get { return (Flags & ActorFlags.Visible) != 0; }
    set {
        if (value) {
            Flags |= ActorFlags.Visible;
        } else {
            Flags &= ~ActorFlags.Visible;
        }
    }
}

